from datetime import datetime

import math
import pandas as pd
import csv
import json
import matplotlib.pyplot as plt
import seaborn as sns


# Creates a CSV file named with the current date and time,
# with path in the format data/MM-DD-YYYY_hhmmss.csv.
def create_csv():
    now = datetime.now()
    filename = now.strftime("./data/%m-%d-%Y_%H%M%S.csv")
    with open(filename, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(
            [
                "Image",
                "Algorithm",
                "New Size",
                "Raw",
                "% Saved",
                "Time",
                "Verified",
                "MSE",
                "PSNR",
            ]
        )
        file.close()
    return filename


# Logs all of the current settings in config.json to log.txt,
# as well as the name of the files generated by the current run.
def log_config(filename):
    with open("data/log.txt", "a", newline="\n") as file:
        file.write(filename + "\n")
        with open("src/config.json") as json_file:
            jsData = json.load(json_file)
            for item in jsData:
                item = str(item)
                file.write(item + "; " + str(jsData[item]))
                file.write("\n")
        file.write("-" * 40 + "\n")


# Takes all the data in a CSV file as created using create_csv(),
# turns the important data into Seaborn plots, and saves them.
def translate_data(filename, outliers=True):
    df = pd.read_csv(filename)
    droppeddf = df.dropna(subset=["MSE"], inplace=False)
    if droppeddf.empty:
        fig, axes = plt.subplots(1, 2)
    else:
        fig, axes = plt.subplots(1, 4)
    sns.set_theme()
    sns.boxplot(
        data=df,
        y="% Saved",
        x="Algorithm",
        ax=axes[0],
        flierprops={"marker": "x"},
        showfliers=outliers,
        palette="husl",
    )
    sns.boxplot(
        data=df,
        y="Time",
        x="Algorithm",
        ax=axes[1],
        flierprops={"marker": "x"},
        showfliers=outliers,
        palette="husl",
    )
    if not droppeddf.empty:
        sns.boxplot(
            data=df,
            y="MSE",
            x="Algorithm",
            ax=axes[2],
            flierprops={"marker": "x"},
            showfliers=outliers,
            palette="husl",
        )
        sns.boxplot(
            data=df,
            y="PSNR",
            x="Algorithm",
            ax=axes[3],
            flierprops={"marker": "x"},
            showfliers=outliers,
            palette="husl",
        )
    for axis in axes:
        axis.set_xticklabels(axis.get_xticklabels(), rotation=40, ha="right")
    plt.tight_layout()
    if outliers:
        new_filename = filename.split(".")[0] + ".png"
    else:
        new_filename = filename.split(".")[0] + "-trimmed.png"
    fig.savefig(new_filename)


def MSE(img1, img2):
    if img1.shape != img2.shape:
        raise Exception("Images must have the same dimensions.")
    height, width = img1.shape
    total_error = 0
    for i in range(height):
        for j in range(width):
            total_error += abs(img1[i, j] - img2[i, j])


def PSNR(img1, img2):
    if img1.shape != img2.shape:
        raise Exception("Images must have the same dimensions.")
    max_intensity = img1.max()
    return 20 * math.log10(max_intensity) - 10 * math.log10(MSE(img1, img2))
